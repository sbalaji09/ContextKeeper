version: "3.9"

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_DB: mydatabase
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    env_file: .env
    environment:
      DATABASE_URL: postgres://${POSTGRES_USER:-app}:${POSTGRES_PASSWORD:-app}@db:5432/${POSTGRES_DB:-appdb}
      NODE_ENV: development
      PORT: ${API_PORT:-4000}
    ports:
      - "${API_PORT:-4000}:4000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./api:/app
      - /app/node_modules
    command: npm run dev
    restart: unless-stopped

  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    env_file: .env
    environment:
      REACT_APP_API_URL: http://api:4000
    ports:
      - "5173:5173" # or whatever your React dev server uses
    volumes:
      - ./dashboard:/app
      - /app/node_modules
    command: npm run dev
    depends_on:
      - api
    restart: unless-stopped

  extension:
    build:
      context: ./extension
      dockerfile: Dockerfile
    command: npm run watch
    volumes:
      - ./extension:/app
      - /app/node_modules
      - extension_dist:/app/dist
    restart: unless-stopped

volumes:
  db_data:
  extension_dist:
